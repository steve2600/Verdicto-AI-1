import { motion } from "framer-motion";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Download, Clock, MessageSquare, Trash2, Eye, FileText } from "lucide-react";
import { useQuery, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import { toast } from "sonner";
import { ConfidenceBadge } from "@/components/ConfidenceBadge";
import { useState } from "react";
import type { Id } from "@/convex/_generated/dataModel";
import { Separator } from "@/components/ui/separator";
import { AnimatePresence } from "framer-motion";

export default function History() {
  // Query History State
  const queries = useQuery(api.queries.list);
  const predictions = useQuery(api.predictions.listByUser);
  const deleteQuery = useMutation(api.queriesDelete.deleteQuery);
  const [selectedQuery, setSelectedQuery] = useState<any>(null);
  const [isDeleting, setIsDeleting] = useState(false);

  // Live Verdict History State
  const notesHistory = useQuery(api.verdictNotes.list);
  const deleteNote = useMutation(api.verdictNotes.deleteNote);
  const [selectedHistoryNote, setSelectedHistoryNote] = useState<any>(null);

  const handleExport = () => {
    toast.success("Exporting query history...");
  };

  const handleDelete = async (queryId: Id<"queries">) => {
    setIsDeleting(true);
    try {
      await deleteQuery({ queryId });
      toast.success("Query and associated prediction deleted successfully");
      setSelectedQuery(null);
    } catch (error) {
      toast.error("Failed to delete query");
    } finally {
      setIsDeleting(false);
    }
  };

  const downloadNotes = (notes: any, title?: string) => {
    const content = `
${title || 'LIVE VERDICT NOTES'}
Generated: ${new Date(notes.timestamp).toLocaleString()}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TRANSCRIPT:
${notes.transcript}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
KEY POINTS:
${notes.bulletPoints.map((point: string, idx: number) => `${idx + 1}. ${point}`).join('\n')}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
AI SUMMARY:
${notes.aiSummary}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Generated by Verdicto-AI - Legal AI Assistant
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `verdict-notes-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success("Notes downloaded!");
  };

  const handleDeleteNote = async (noteId: any) => {
    try {
      await deleteNote({ noteId });
      toast.success("Note deleted from history");
    } catch (error) {
      toast.error("Failed to delete note");
    }
  };

  return (
    <div className="p-4 lg:p-8 max-w-7xl mx-auto pb-20">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl md:text-5xl font-light mb-2 text-foreground tracking-tight" style={{ fontFamily: "'Inter', sans-serif", fontWeight: 300, letterSpacing: '-0.02em' }}>History</h1>
            <p className="text-muted-foreground font-light" style={{ letterSpacing: '0.01em' }}>
              Review your past queries and verdict notes
            </p>
          </div>
        </div>
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
      >
        <Tabs defaultValue="queries" className="w-full">
          <TabsList className="grid w-full max-w-md grid-cols-2 mb-6">
            <TabsTrigger value="queries" className="gap-2">
              <MessageSquare className="h-4 w-4" />
              Query History
            </TabsTrigger>
            <TabsTrigger value="verdicts" className="gap-2">
              <FileText className="h-4 w-4" />
              Live Verdict History
            </TabsTrigger>
          </TabsList>

          {/* Query History Tab */}
          <TabsContent value="queries">
            <Card className="macos-card overflow-hidden">
              <Table>
                <TableHeader>
                  <TableRow className="border-border/50">
                    <TableHead>Timestamp</TableHead>
                    <TableHead>Query</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Confidence</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {queries?.map((query: any, index: number) => {
                    const prediction = predictions?.find((p: any) => p.queryId === query._id);
                    return (
                      <motion.tr
                        key={query._id}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.05 }}
                        className="border-border/50 hover:bg-primary/5 macos-transition"
                      >
                        <TableCell>
                          <div className="flex items-center gap-2 text-sm text-muted-foreground">
                            <Clock className="h-3 w-3" />
                            {new Date(query._creationTime).toLocaleString()}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-start gap-3">
                            <MessageSquare className="h-4 w-4 text-primary mt-1 flex-shrink-0" />
                            <p className="text-sm line-clamp-2">{query.queryText}</p>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge
                            variant={
                              query.status === "completed"
                                ? "default"
                                : query.status === "failed"
                                ? "destructive"
                                : "secondary"
                            }
                          >
                            {query.status}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          {prediction && (
                            <ConfidenceBadge
                              level={prediction.confidenceLevel}
                              score={prediction.confidenceScore}
                            />
                          )}
                        </TableCell>
                        <TableCell className="text-right">
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="macos-button"
                            onClick={() => setSelectedQuery({ query, prediction })}
                          >
                            View Details
                          </Button>
                        </TableCell>
                      </motion.tr>
                    );
                  })}
                </TableBody>
              </Table>
              {(!queries || queries.length === 0) && (
                <div className="text-center py-12">
                  <MessageSquare className="h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50" />
                  <p className="text-muted-foreground">No query history yet</p>
                  <p className="text-sm text-muted-foreground mt-2">
                    Start analyzing cases to build your history
                  </p>
                </div>
              )}
            </Card>
          </TabsContent>

          {/* Live Verdict History Tab */}
          <TabsContent value="verdicts">
            {notesHistory && notesHistory.length > 0 ? (
              <div className="grid gap-4">
                {notesHistory.map((note: any) => (
                  <motion.div
                    key={note._id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    <Card className="p-4 hover:shadow-lg transition-shadow">
                      <div className="flex items-start justify-between gap-4">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <FileText className="h-5 w-5 text-primary" />
                            <h3 className="font-semibold text-foreground">{note.title}</h3>
                          </div>
                          <p className="text-sm text-muted-foreground mb-2">
                            {new Date(note.timestamp).toLocaleString()}
                          </p>
                          <p className="text-sm text-muted-foreground line-clamp-2">
                            {note.aiSummary}
                          </p>
                        </div>
                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setSelectedHistoryNote(note)}
                            className="gap-2"
                          >
                            <Eye className="h-4 w-4" />
                            View
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => downloadNotes(note, note.title)}
                            className="gap-2"
                          >
                            <Download className="h-4 w-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleDeleteNote(note._id)}
                            className="gap-2 text-destructive hover:text-destructive"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </Card>
                  </motion.div>
                ))}
              </div>
            ) : (
              <Card className="p-8 text-center">
                <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">
                  No verdict notes in history yet. Generate notes from a transcript in the Live Verdict page to see them here.
                </p>
              </Card>
            )}
          </TabsContent>
        </Tabs>
      </motion.div>

      {/* Query Details Dialog */}
      <Dialog open={!!selectedQuery} onOpenChange={() => setSelectedQuery(null)}>
        <DialogContent className="glass-strong max-w-3xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-foreground text-xl">Query Details</DialogTitle>
            <DialogDescription>
              {selectedQuery?.query && (
                <span className="text-sm text-muted-foreground">
                  {new Date(selectedQuery.query._creationTime).toLocaleString()}
                </span>
              )}
            </DialogDescription>
          </DialogHeader>
          {selectedQuery && (
            <div className="space-y-6">
              <div>
                <h4 className="font-medium text-foreground mb-2 flex items-center gap-2">
                  <MessageSquare className="h-4 w-4" />
                  Query
                </h4>
                <div className="glass p-4 rounded-lg">
                  <p className="text-sm text-foreground">{selectedQuery.query.queryText}</p>
                </div>
              </div>
              <div>
                <h4 className="font-medium text-foreground mb-2">Status</h4>
                <Badge
                  variant={
                    selectedQuery.query.status === "completed"
                      ? "default"
                      : selectedQuery.query.status === "failed"
                      ? "destructive"
                      : "secondary"
                  }
                >
                  {selectedQuery.query.status}
                </Badge>
              </div>
              {selectedQuery.prediction && (
                <>
                  <div>
                    <h4 className="font-medium text-foreground mb-2">Confidence Score</h4>
                    <ConfidenceBadge
                      level={selectedQuery.prediction.confidenceLevel}
                      score={selectedQuery.prediction.confidenceScore}
                    />
                  </div>
                  <div>
                    <h4 className="font-medium text-foreground mb-2">Prediction</h4>
                    <div className="glass p-4 rounded-lg">
                      <p className="text-sm text-foreground">{selectedQuery.prediction.prediction}</p>
                    </div>
                  </div>
                  <div>
                    <h4 className="font-medium text-foreground mb-2">Reasoning</h4>
                    <div className="glass p-4 rounded-lg">
                      <p className="text-sm text-foreground">{selectedQuery.prediction.reasoning}</p>
                    </div>
                  </div>
                  {selectedQuery.prediction.biasFlags && selectedQuery.prediction.biasFlags.length > 0 && (
                    <div>
                      <h4 className="font-medium text-foreground mb-2">Bias Flags</h4>
                      <div className="flex flex-wrap gap-2">
                        {selectedQuery.prediction.biasFlags.map((flag: any, idx: number) => (
                          <Badge
                            key={idx}
                            variant={
                              flag.severity === "high"
                                ? "destructive"
                                : flag.severity === "medium"
                                ? "default"
                                : "secondary"
                            }
                          >
                            {flag.type}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
          )}
          <DialogFooter className="flex items-center justify-between gap-2">
            <Button
              variant="destructive"
              onClick={() => selectedQuery && handleDelete(selectedQuery.query._id)}
              disabled={isDeleting}
              className="flex items-center gap-2"
            >
              {isDeleting ? (
                <>
                  <div className="h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                  Deleting...
                </>
              ) : (
                <>
                  <Trash2 className="h-4 w-4" />
                  Delete Query
                </>
              )}
            </Button>
            <Button variant="outline" onClick={() => setSelectedQuery(null)}>
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Live Verdict Note Detail Modal */}
      <AnimatePresence>
        {selectedHistoryNote && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
            onClick={() => setSelectedHistoryNote(null)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
              className="bg-background rounded-lg p-6 max-w-3xl w-full max-h-[80vh] overflow-y-auto"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-2xl font-bold">{selectedHistoryNote.title}</h3>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSelectedHistoryNote(null)}
                >
                  ✕
                </Button>
              </div>
              <p className="text-sm text-muted-foreground mb-4">
                {new Date(selectedHistoryNote.timestamp).toLocaleString()}
              </p>
              <Separator className="my-4" />
              <div className="space-y-4">
                <div>
                  <h4 className="font-semibold mb-2">Transcript</h4>
                  <div className="bg-muted/50 p-4 rounded-lg max-h-48 overflow-y-auto">
                    <p className="text-sm text-muted-foreground whitespace-pre-wrap">
                      {selectedHistoryNote.transcript}
                    </p>
                  </div>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">Key Points</h4>
                  <div className="bg-muted/50 p-4 rounded-lg">
                    <ul className="space-y-2">
                      {selectedHistoryNote.bulletPoints.map((point: string, idx: number) => (
                        <li key={idx} className="flex gap-2 text-foreground">
                          <span className="text-primary font-semibold">{idx + 1}.</span>
                          <span>{point}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">AI Summary</h4>
                  <div className="bg-muted/50 p-4 rounded-lg">
                    <p className="text-muted-foreground leading-relaxed">
                      {selectedHistoryNote.aiSummary}
                    </p>
                  </div>
                </div>
                <Button
                  onClick={() => downloadNotes(selectedHistoryNote, selectedHistoryNote.title)}
                  className="w-full gap-2"
                >
                  <Download className="h-4 w-4" />
                  Download Notes
                </Button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
